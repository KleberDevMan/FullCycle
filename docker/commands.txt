---------------------------------------------------- LIST/PS CONTAINER
docker ps --help

# list actives containers
docker ps

  # containers que executaram em algum momento
  docker ps -a

  # stop container
  docker stop CONTAINER

  # remove container
  docker rm CONTAINER

    # remove container running
    docker rm CONTAINER -f

---------------------------------------------------- CREATE/RUN CONTAINER

# create (se precisar) e start um container (roda o entrypoint.sh) 
docker run hello-world
  
  # especificando a versao da imagem
  docker run hello-world:latest

  # manter o modo interativo (attach)
  -it

  # remover o container do historico assim que eu terminar o trabalho
  --rm

  # desatachar o meu terminal do processo que ficará rodando
  -d

  # colocar um nome melhor
  --name

---------------------------------------------------- START CONTAINER
docker start --help

# start um container ja existente (geralmente usamos mais o run msm)
docker start interesting_zhukovsky

# nginx: Um Web Server que fica com a porta 80/tcp aberta para vc se conectar nela

  # redireciona a port 8080 do meu host para a port 80 do meu container
  docker run -p 8080:80 nginx

---------------------------------------------------- EXEC IN CONTAINER
docker exec --help

# exec command into active container
docker exec -it nginx bash

  # isntall vim into container docker
  apt-get update
  apt-get install vim

---------------------------------------------------- REMOVE
docker rm --help

# remove containers não ativos e inativos
docker rm $(docker ps -a -q) -f

---------------------------------------------------- VOLUMES
docker run --help

# BIND MOUNTS: 
  colocar pastas dentro de um container
    docker run -d --name nginx -p 8080:80 -v ~/Develop/DockerProjects/html/:/usr/share/nginx/html nginx
  ou melhor
    docker run -d --name nginx -p 8080:80 -mount type=bind,source="$(pwd)"/html/,target=/usr/share/nginx/html nginx

# VOLUMES: 
  tudo o que for colocado no volume (seja pelo container ou pelo host) permanecerá lá, compartilhado 
  com todos os container que estiverem usando aquele volume
    docker run -d --name nginx -p 8080:80 --mount type=volume,source=meuvolume,target=/app nginx

---------------------------------------------------- IMAGENS
docker image --help
docker rmi --help

# cria uma imagem personalizado local
	docker build -t kleberdevmen/nginx-with-vim:latest .

# remove uma image
  docker rmi kleberdevmen/nginx-with-vim


---------------------------------------------------- NETWORKS
docker network --help

tipos:
  - brige (default)     container <-> containerddsd
  - host                host <-> container
  - overlay             containers em hosts diferentes

Voce pode:
1. criar novas redes - docker network create
2. adicionar containers em uma rede especifica - docker network connect
3. consigo inspecicionar os containers que estão em uma determinada rede - docker network inspect

Obs.
  quanto você nao especifica uma rede, o container é criado na brige. Na bridge, só conseguimos pingar outro container se passarmos o IP dele.
  em uma redepersonalizada não. Você consegue pingar um no outro atraves do nome do container.

  container acessando nossa máquina: host.docker.internal

---------------------------------------------------- DOCKERIZANDO UMA APLICACAO
1. instalar a aplicacao em um container e anotar todos os passos em um Dockerfile (use aspas duplas)
2. buidar a imagem (lembrando que o segundo build é sempre mais rápido. Ele cacheia as alterações)
3. colocar o container para rodar (run)
4. subir para docker rub

